const express = require("express");
const app = express();
const path = require("path");
const sqlite3 = require("sqlite3");
const { open } = require("sqlite");
app.use(express.json());
let database = null;
const pathArea = path.join(__dirname, "todoApplication.db");
initializeDbAndServer = async () => {
  try {
    const database = await open({
      filename: pathArea,
      driver: sqlite3.Database,
    });
    app.listen(3000, () => {
      console.log("Server Running at http://localhost:3000/");
    });
  } catch (error) {
    console.log(`DB Error:${error.message}`);
    process.exit(1);
  }
};
initializeDbAndServer();

convertDbObjectToResponsiveObject = (dbObject) => {
  return {
    id: dbObject.id,
    todo: dbObject.todo,
    category: dbObject.category,
    priority: dbObject.priority,
    status: dbObject.status,
    due_Date: dbObject.due_date,
  };
};

const hasPriorityAndStatusProperties = (requestQuery) => {
  return;
  requestQuery.priority !== undefined && requestQuery.status !== undefined;
};

const hasPriorityProperty = (requestQuery) => {
  return requestQuery.priority !== undefined;
};

const hasStatusProperty = (requestQuery) => {
  return requestQuery.status !== undefined;
};
const hasCategoryAndStatus = (requestQuery) => {
  return;
  requestQuery.category !== undefined && requestQuery.status !== undefined;
};
const hasCategory = (requestQuery) => {
  return requestQuery.category !== undefined;
};
const hasCategoryAndPriority = (requestQuery) => {
  return requestQuery.category !== undefined && requestQuery.priority;
};

app.get("/todos/", async (request, response) => {
  let getTodosQuery = "";
  let data = null;
  const { search_q = "", priority, status, category } = request.query;
  switch (true) {
    case hasPriorityAndStatusProperties(request.query):
      getTodosQuery = `
      SELECT
        *
      FROM
        todo 
      WHERE
        todo LIKE '%${search_q}%'
        AND status = '${status}'
        AND priority = '${priority}';`;
      break;
    case hasPriorityProperty(request.query):
      getTodosQuery = `
      SELECT
        *
      FROM
        todo 
      WHERE
        todo LIKE '%${search_q}%'
        AND priority = ${priority};`;
      break;
    case hasStatusProperty(request.query):
      getTodosQuery = `
      SELECT
        *
      FROM
        todo 
      WHERE
        todo LIKE '%${search_q}%'
        AND status = '${status}';`;
      break;

    case hasCategoryAndStatus(request.Query):
      getTodosQuery = `select *
      from todo
      where status=${status}
       and category=${category} and
        todo LIKE '%${search_q}%`;

      break;

    case hasCategory(request.Query):
      getTodosQuery = `select from todo
                        where category=${category}`;
      break;
    case hasCategoryAndPriority(request.Query):
      getTodosQuery = `select from todo
                   where category=${category} and 
                   priority=${priority} and
                   todo LIKE '%${search_q}%`;
      break;
    default:
      getTodosQuery = `
      SELECT
        *
      FROM
        todo 
      WHERE
        todo LIKE '%${search_q}%';`;
  }

  data = await database.get(getTodosQuery);

  response.send(data);
});
